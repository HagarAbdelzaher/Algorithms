#include <iostream>
using namespace std;

// using recursion
int fib1 (int n )
{
    if(n==0 || n==1)
        return n;
    else
        return fib1(n-1)+fib1(n-2);
}
// using dynamic programming
int fib2 (int n )
{
    int f[n+1];
    f[0]=0;
    f[1]=1;
    for(int i=2 ; i<=n ; i++)
    {
        f[i]= f[i-1]+f[i-2];
    }
    return f[n];
}
void multiply(int f[2][2] , int mat[2][2])
{
   int a = f[0][0] * mat[0][0] + f[0][1] * mat[1][0];
   int b= f[0][0] * mat[0][1] + f[0][1] * mat[1][1];
   int c = f[1][0] * mat[0][0] + f[1][1] * mat[1][0];
   int d = f[1][0] * mat[0][1] + f[1][1] * mat[1][1];
   f[0][0] = a;
   f[0][1] = b;
   f[1][0] = c;
   f[1][1] = d;
}

void power(int f[2][2] , int n)
{
    if(n==0 || n==1)
        return;
    int mat[2][2] = {{1,1},{1,0}};
    power(f,n/2);
    multiply(f,f);
    if(n%2!=0)
        multiply(f,mat);
}
// using matrix powering method
int fib3 (int n)
{
    int f[2][2]={{1,1},{1,0}};
    if(n==0)
        return 0;
    power(f,n-1);
    return(f[0][0]);
}


int main()
{
    int num;
   cout<<"enter number"<<endl;
   cin>>num;

   cout<<"using recursion " << fib1(num)<<endl;
   cout<<"using DP " <<fib2(num)<<endl;
   cout<<"using matrices " <<fib3(num)<<endl;
    return 0;
}
