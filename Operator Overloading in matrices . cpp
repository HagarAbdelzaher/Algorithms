#include <iostream>

using namespace std;
class Matrix
{
private:
    int rows;
    int cols;
    int **mat;
public:
Matrix(){};
Matrix(int r , int c)
{
    rows = r;
    cols = c;
    mat = new int* [r];
    for ( int i=0 ; i< r; i++)
    {
        mat[i]= new int[c];
        for(int k=0 ; k< c ; k++)
            mat[i][k]=0;
    }
}
Matrix operator + ( Matrix m)
{
    Matrix sum (rows , cols);
    for ( int i=0 ; i< rows ; i++)
        for( int j=0 ; j< cols ; j++)
    {
        sum.mat[i][j] = this->mat[i][j] + m.mat[i][j];
    }
    return sum;
}
void print ()
{
    for ( int i=0 ; i<rows ; i++)
        for (int j=0 ; j<cols ; j++)
    {
        cout<<mat[i][j];
    }
}
friend ostream &operator << (ostream &out , const Matrix &m);
friend istream &operator >> (istream &in , const Matrix &m);
};
 istream &operator >> (istream &in , const Matrix &m)
{
    for(int i=0 ; i<m.rows ; i++)
        for( int j=0 ; j< m.cols ; j++)
    {
        in>>m.mat[i][j];
    }
    return in;

}
ostream &operator << (ostream &out , const Matrix &m)
{
    for(int i=0 ; i<m.rows ; i++)
   {
       for( int j=0 ; j< m.cols ; j++)
    {
        out<<m.mat[i][j]<<" ";
    }
    out<<endl;
   }
    return out;
}
int main()
{
    Matrix m1(2,2);
    Matrix m2(2,2);
    cout<<" enter m1 data"<<endl;
    cin>>m1;
    cout<<" enter m2 data"<<endl;
    cin>>m2;
   cout<<(m1+m2);



}
